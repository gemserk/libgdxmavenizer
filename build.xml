<project name="Libgdx" default="all" basedir=".">
	<property name="base" location="." />
	<property name="source" location="${base}/libgdx" />
	<property name="target" location="${base}/target" />
	<property name="temp" location="${target}/tmp" />
	<property name="maven" location="${base}/maven" />
	<property name="release" value="false" />

	<!-- url for the release http://libgdx.googlecode.com/files -->
	<!-- release file libgdx-0.9.4.zip -->

	<property name="downloadurl" value="http://libgdx.badlogicgames.com/nightlies" />
	<property name="downloadfilename" value="libgdx-nightly-latest.zip" />

	<target name="download" depends="checkinitialconditions">
		<input message="All data in the ${source} folder will be deleted. Continue? " validargs="yes,no" addproperty="do.delete" />
		<condition property="do.abort">
			<equals arg1="no" arg2="${do.delete}" />
		</condition>
		<fail if="do.abort">Build aborted by user.</fail>
		<delete dir="${source}" quiet="true" failonerror="false" taskname="cleaning source" />
		<mkdir dir="${source}" />
		<tstamp />
		<get dest="${source}/${downloadfilename}" src="${downloadurl}/${downloadfilename}" verbose="true" />
		<unzip dest="${source}" src="${source}/${downloadfilename}" />
	</target>


	<target name="checkinitialconditions">
		<condition property="sourceexists">
			<available file="${source}" type="dir" />
		</condition>

	</target>

	<target name="failifnotpresentsource" depends="checkinitialconditions">
		<fail unless="${sourceexists}" message="put libgdx in the ${source} dir, you can use 'ant download' to download the nightly build" />
	</target>


	<target name="clean">
		<delete dir="${target}" quiet="true" failonerror="false" taskname="cleaning target" />
	</target>

	<target name="init" depends="failifnotpresentsource, clean">
		<mkdir dir="${target}" />
		<mkdir dir="${temp}" />
	</target>

	<target name="copysame" depends="init">
		<copy todir="${target}">
			<fileset dir="${source}">
				<include name="gdx.jar" />
				<include name="gdx-backend-android.jar" />
				<include name="gdx-backend-gwt.jar" />
			</fileset>
			<fileset dir="${source}/sources">
				<include name="gdx-sources.jar" />
				<include name="gdx-backend-android-sources.jar" />
				<include name="gdx-backend-gwt-sources.jar" />
			</fileset>
			<fileset dir="${source}/extensions/gdx-tools">
				<include name="gdx-tools.jar" />
			</fileset>
			<fileset dir="${source}/extensions/gdx-tools/sources/">
				<include name="gdx-tools-sources.jar" />
			</fileset>
		</copy>
	</target>

	<target name="createcombinedsources" depends="init">
		<zip destfile="${target}/gdx-backend-lwjgl-sources.jar" duplicate="preserve">
			<zipgroupfileset dir="${source}" includes="sources/gdx-backend-lwjgl-sources.jar,sources/gdx-openal-sources.jar"/>
		</zip>
	</target>

	<target name="createcleanbackends" depends="init">
		<jar destfile="${target}/gdx-backend-lwjgl.jar">
			<zipfileset src="${source}/gdx-backend-lwjgl.jar">
				<include name="com/badlogic/**" />
				<include name="com/jcraft/**" />
				<include name="javazoom/**" />
				<include name="**/*.ser" />
			</zipfileset>
		</jar>
	</target>

	<target name="createlibgdxnativespc" depends="init">
		<property name="nativespcdir" location="${temp}/nativespc" />
		<mkdir dir="${nativespcdir}" />
		<unzip dest="${nativespcdir}" src="${source}/gdx-natives.jar" />
		<jar destfile="${target}/gdx-platform-natives-win.jar" taskname="gdx-platform-natives-win.jar">
			<fileset dir="${nativespcdir}">
				<include name="*.dll" />
			</fileset>
		</jar>
		<jar destfile="${target}/gdx-platform-natives-linux.jar" taskname="gdx-platform-natives-linux.jar">
			<fileset dir="${nativespcdir}">
				<include name="*.so" />
			</fileset>
		</jar>
		<jar destfile="${target}/gdx-platform-natives-mac.jar" taskname="gdx-platform-natives-mac.jar">
			<fileset dir="${nativespcdir}">
				<include name="*.dylib" />
			</fileset>
		</jar>
	</target>

	<target name="createlibgdxnativesandroid" depends="init">

		<jar destfile="${target}/gdx-platform-natives-armeabi.jar" taskname="gdx-platform-natives-armeabi.jar">
			<fileset dir="${source}/armeabi">
				<include name="*" />
			</fileset>
		</jar>
		<jar destfile="${target}/gdx-platform-natives-armeabi-v7a.jar" taskname="gdx-platform-natives-armeabi-v7a.jar">
			<fileset dir="${source}/armeabi">
				<include name="*" />
			</fileset>
		</jar>
	</target>

	<target name="version">
		<script language="javascript" classpath="${source}/gdx.jar">
			<![CDATA[
						importPackage(java.lang);
						var version = com.badlogic.gdx.Version.VERSION
						if(project.getProperty("release")=="false")
							version=version + "-SNAPSHOT"
			
						System.out.println("LIBGDX Version: " + version);
						project.setNewProperty("version",version);
					]]>
		</script>
	</target>

	<target name="copymavenpoms" depends="version">
		<copy todir="${target}">
			<fileset dir="${maven}">
				<include name="*.pom" />
			</fileset>
			<filterset>
				<filter token="VERSION" value="${version}" />
			</filterset>
		</copy>
	</target>

	<target name="copymavendeploybuild">
		<copy todir="${target}">
			<fileset dir="${maven}">
				<include name="build.xml" />
				<include name="maven-ant-tasks-2.1.1.jar" />
			</fileset>
		</copy>
	</target>

	<target name="copymavenanttasks">
		<copy todir="${target}">
			<fileset dir="${base}">
				<include name="maven-ant-tasks-2.1.1.jar" />
			</fileset>
		</copy>
	</target>

	<target name="all" depends="copysame, createcleanbackends, createcombinedsources, createlibgdxnativespc, createlibgdxnativesandroid, copymavenpoms, copymavendeploybuild, copymavenanttasks">
		<echo message="${version}" />
	</target>

	<target name="deploy" depends="all">
		<ant antfile="${target}/build.xml" target="deploy" inheritall="false" useNativeBasedir="true" />
	</target>
</project>
