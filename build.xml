<project name="Libgdx" default="all" basedir=".">
	<property name="base" location="." />
	<property name="source" location="${base}/libgdx" />
	<property name="target" location="${base}/target" />
	<property name="temp" location="${target}/tmp" />
	<property name="maven" location="${base}/maven" />
	<property name="release" value="false" />


	<target name="downloadnightly" depends="checkinitialconditions">
		<input message="All data in the ${source} folder will be deleted. Continue? " validargs="yes,no" addproperty="do.delete" />
		<condition property="do.abort">
			<equals arg1="no" arg2="${do.delete}" />
		</condition>
		<fail if="do.abort">Build aborted by user.</fail>
		<delete dir="${source}" quiet="true" failonerror="false" taskname="cleaning source" />
		<mkdir dir="${source}" />
		<tstamp />
		<property name="nightlytimestamp" value="${DSTAMP}" />
		<property name="nightlyfilename" value="libgdx-nightly-${nightlytimestamp}.zip" />
		<get dest="${source}/${nightlyfilename}" src="http://libgdx.l33tlabs.org/${nightlyfilename}" verbose="true"/>
		<unzip dest="${source}" src="${source}/${nightlyfilename}" />
	</target>


	<target name="checkinitialconditions">
		<condition property="sourceexists">
			<available file="${source}" type="dir" />
		</condition>

	</target>

	<target name="failifnotpresentsource" depends="checkinitialconditions">
		<fail unless="${sourceexists}" message="put libgdx in the ${source} dir" />
	</target>


	<target name="clean">
		<delete dir="${target}" quiet="true" failonerror="false" taskname="cleaning target" />
	</target>

	<target name="init" depends="failifnotpresentsource, clean">
		<mkdir dir="${target}" />
		<mkdir dir="${temp}" />
	</target>

	<target name="copysame" depends="init">
		<copy todir="${target}">
			<fileset dir="${source}">
				<include name="gdx.jar" />
				<include name="gdx-sources.jar" />
				<include name="gdx-backend-android.jar" />
				<include name="gdx-backend-android-sources.jar" />
				<include name="gdx-backend-lwjgl-sources.jar" />
			</fileset>
		</copy>
	</target>

	<target name="createcleanbackends" depends="init">
		<jar destfile="${target}/gdx-backend-lwjgl.jar">
			<zipfileset src="${source}/gdx-backend-lwjgl.jar">
				<include name="com/badlogic/**" />
			</zipfileset>
		</jar>
	</target>


	<target name="createlibgdxnativespc" depends="init">
		<property name="nativespcdir" location="${temp}/nativespc" />
		<mkdir dir="${nativespcdir}" />
		<unzip dest="${nativespcdir}" src="${source}/gdx-natives.jar" />
		<jar destfile="${target}/gdx-platform-natives-win.jar" taskname="gdx-platform-natives-win.jar">
			<fileset dir="${nativespcdir}">
				<include name="*.dll" />
			</fileset>
		</jar>
		<jar destfile="${target}/gdx-platform-natives-linux.jar" taskname="gdx-platform-natives-linux.jar">
			<fileset dir="${nativespcdir}">
				<include name="*.so" />
			</fileset>
		</jar>
		<jar destfile="${target}/gdx-platform-natives-mac.jar" taskname="gdx-platform-natives-mac.jar">
			<fileset dir="${nativespcdir}">
				<include name="*.dylyb" />
			</fileset>
		</jar>
	</target>

	<target name="createlibgdxnativesandroid" depends="init">

		<jar destfile="${target}/gdx-platform-natives-armeabi.jar" taskname="gdx-platform-natives-armeabi.jar">
			<fileset dir="${source}/armeabi">
				<include name="*" />
			</fileset>
		</jar>
		<jar destfile="${target}/gdx-platform-natives-armeabi-v7a.jar" taskname="gdx-platform-natives-armeabi-v7a.jar">
			<fileset dir="${source}/armeabi">
				<include name="*" />
			</fileset>
		</jar>
	</target>

	<target name="version">
		<script language="javascript" classpath="${source}/gdx.jar">
			<![CDATA[
						importPackage(java.lang);
						var version = com.badlogic.gdx.Version.VERSION
						if(project.getProperty("release")=="false")
							version=version + "-SNAPSHOT"
			
						System.out.println("LIBGDX Version: " + version);
						project.setNewProperty("version",version);
					]]>
		</script>
	</target>

	<target name="copymavenpoms" depends="version">
		<copy todir="${target}">
			<fileset dir="${maven}">
				<include name="*.pom" />
			</fileset>
			<filterset>
				<filter token="VERSION" value="${version}" />
			</filterset>
		</copy>
	</target>

	<target name="copymavendeploybuild">
		<copy todir="${target}">
			<fileset dir="${maven}">
				<include name="build.xml" />
			</fileset>
		</copy>
	</target>

	<target name="all" depends="copysame,createcleanbackends,  createlibgdxnativespc, createlibgdxnativesandroid, copymavenpoms, copymavendeploybuild">
		<echo message="${version}" />
	</target>
</project>